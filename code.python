from flask import Flask, jsonify, request
from flask_cors import CORS
import sqlite3

app = Flask(__name__)
CORS(app)

def get_db_connection():
    conn = sqlite3.connect('app.db')
    conn.row_factory = sqlite3.Row
    return conn

@app.route('/usuario', methods=['GET'])
def get_usuarios():
    conn = get_db_connection()
    usuarios = conn.execute('SELECT * FROM usuario').fetchall()
    conn.close()
    return jsonify([dict(usuario) for usuario in usuarios])

@app.route('/usuario/<int:id>', methods=['GET'])
def get_usuario(id):
    conn = get_db_connection()
    usuario = conn.execute('SELECT * FROM usuario WHERE id = ?', (id,)).fetchone()
    conn.close()
    if usuario is None:
        return jsonify({'error': 'Usuário não encontrado'}), 404
    return jsonify(dict(usuario))

@app.route('/usuario', methods=['POST'])
def create_usuario():
    novo_usuario = request.get_json()
    conn = get_db_connection()
    conn.execute('INSERT INTO usuario (nome, email) VALUES (?, ?)',
                 (novo_usuario['nome'], novo_usuario['email']))
    conn.commit()
    conn.close()
    return jsonify(novo_usuario), 201

@app.route('/usuario/<int:id>', methods=['PUT'])
def update_usuario(id):
    usuario_atualizado = request.get_json()
    conn = get_db_connection()
    conn.execute('UPDATE usuario SET nome = ?, email = ? WHERE id = ?',
                 (usuario_atualizado['nome'], usuario_atualizado['email'], id))
    conn.commit()
    conn.close()
    return jsonify(usuario_atualizado)

@app.route('/usuario/<int:id>', methods=['PATCH'])
def partial_update_usuario(id):
    usuario_atualizado = request.get_json()
    conn = get_db_connection()
    if 'nome' in usuario_atualizado:
        conn.execute('UPDATE usuario SET nome = ? WHERE id = ?', (usuario_atualizado['nome'], id))
    if 'email' in usuario_atualizado:
        conn.execute('UPDATE usuario SET email = ? WHERE id = ?', (usuario_atualizado['email'], id))
    conn.commit()
    conn.close()
    return jsonify(usuario_atualizado)

@app.route('/usuario/<int:id>', methods=['DELETE'])
def delete_usuario(id):
    conn = get_db_connection()
    conn.execute('DELETE FROM usuario WHERE id = ?', (id,))
    conn.commit()
    conn.close()
    return jsonify({'message': 'Usuário excluído'}), 204

if __name__ == '__main__':
    app.run(debug=True)
